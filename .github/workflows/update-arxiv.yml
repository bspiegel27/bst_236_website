name: Update ArXiv Cache

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch: {}
  push:
    branches:
      - main

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Install xmlstarlet
        run: sudo apt-get install xmlstarlet
      
      - name: Fetch ArXiv Data
        id: fetch-data
        run: |
          # Fetch XML from ArXiv
          curl -s "https://export.arxiv.org/api/query?search_query=all:causal+inference&sortBy=submittedDate&sortOrder=descending&start=0&max_results=10" > arxiv.xml
          
          # Convert XML to JSON array
          papers=$(xmlstarlet sel -t -m "//entry" -o "{" \
            -o '"title":"' -v "normalize-space(title)" -o '",' \
            -o '"authors":"' -m "author" -v "name" -i "position()!=last()" -o ", " -b -o '",' \
            -o '"abstract":"' -v "normalize-space(summary)" -o '",' \
            -o '"published":"' -v "published" -o '",' \
            -o '"link":"' -v "id" -o '"' \
            -o "}," -n arxiv.xml | sed '$s/,$//')
          
          # Create JSON content
          content="{\"lastUpdate\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"papers\": [$papers]}"
          
          # Encode content for GitHub API
          encoded_content=$(echo "$content" | base64 -w 0)
          echo "::set-output name=content::$encoded_content"

      - name: Update GitHub Pages Cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current file SHA (if exists)
          sha=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/contents/data/arxiv-cache.json" \
            | jq -r '.sha // empty')
          
          # Prepare API request body
          if [ -n "$sha" ]; then
            body=$(jq -n --arg sha "$sha" --arg content "${{ steps.fetch-data.outputs.content }}" \
              '{message: "Update ArXiv cache", sha: $sha, content: $content}')
          else
            body=$(jq -n --arg content "${{ steps.fetch-data.outputs.content }}" \
              '{message: "Update ArXiv cache", content: $content}')
          fi
          
          # Update file via GitHub API
          curl -X PUT \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/contents/data/arxiv-cache.json" \
            -d "$body"
